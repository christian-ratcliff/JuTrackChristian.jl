var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"This section contains the detailed API reference for JuTrack.jl, including all modules, functions, and types. This reference is automatically generated from the docstrings in the package.","category":"page"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/#Modules","page":"API","title":"Modules","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Below are the primary modules included in JuTrack.jl.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [JuTrack]\nOrder = [:type, :constant, :function]","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [JuTrack]\nOrder = [:type, :constant, :function]","category":"page"},{"location":"api/#JuTrack.AbstractElement","page":"API","title":"JuTrack.AbstractElement","text":"AbstractElement\n\nAbstract type for all elements in the lattice.\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.Beam","page":"API","title":"JuTrack.Beam","text":"Beam\n\nA struct that contains the information of a beam. The struct contains the following fields:\n\nr::Matrix{Float64}: Nx6 matrix of the 6D phase space coordinates of the beam particles.\nnp::Int: Number of particles.\nnmacro::Int: Number of macro particles.\nenergy::Float64: Energy of the beam in eV.\nlost_flag::Vector{Int}: Vector of length nmacro that contains the lost flag of each particle.\ncharge::Float64: Charge of the beam particles. -1.0 for electrons.\nmass::Float64: Mass of the beam in eV.\ngamma::Float64: Lorentz factor of the beam particles.\nbeta::Float64: Velocity of the beam particles in units of the speed of light.\natomnum::Float64: Atomic number of the beam particles.\nclassrad0::Float64: Classical radiation constant. (not used)\nradconst::Float64: Radiation constant. (not used)\nT0::Float64: Revolution period of the beam particles. (not used)\nnturn::Int: Number of turns in the simulation. (not used)\nznbin::Int: Number of bins in the z direction.\ninzindex::Vector{Int}: Index of the z bin.\nzhist::Vector{Float64}: Histogram of the z direction.\nzhist_edges::Vector{Float64}: Edges of the z histogram.\ntemp1::Vector{Float64}: Temporary variable.\ntemp2::Vector{Float64}: Temporary variable.\ntemp3::Vector{Float64}: Temporary variable.\ntemp4::Vector{Float64}: Temporary variable.\ntemp5::Vector{Float64}: Temporary variable.\nemittance::Vector{Float64}: Emittance in x, y, z directions.\ncentroid::Vector{Float64}: Centroid in x, px, y, py, z, pz directions.\nmoment2nd::Matrix{Float64}: 2nd momentum matrix.\nbeamsize::Vector{Float64}: Beam size in x, px, y, py, z, pz directions.\ncurrent::Float64: Beam current for space charge calculation in A.\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.Beam-Tuple{Beam}","page":"API","title":"JuTrack.Beam","text":"Beam(beam::Beam)\n\nCopy a Beam object.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.Beam-Tuple{Matrix{Float64}, Float64}","page":"API","title":"JuTrack.Beam","text":"Beam(r::Matrix{Float64}, energy::Float64; np::Int=size(r, 1), charge::Float64=-1.0, mass::Float64=0.51099895e6, atn::Float64=1.0,\n    emittance::Vector{Float64}=zeros(Float64, 3), centroid::Vector{Float64}=zeros(Float64, 6), T0::Float64=0.0, znbin::Int=99, current::Float64=0.0)\n\nConstruct a Beam object with coordinates of particles and beam energy. Other parameters are optional.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.Beam-Tuple{Matrix{Float64}}","page":"API","title":"JuTrack.Beam","text":"Beam(;r::Matrix{Float64}=zeros(Float64, 1,6), energy::Float64=1e9, np::Int=size(r, 1), charge::Float64=-1.0, mass::Float64=0.51099895e6, atn::Float64=1.0,\n    emittance::Vector{Float64}=zeros(Float64, 3), centroid::Vector{Float64}=zeros(Float64, 6), T0::Float64=0.0, znbin::Int=99, current::Float64=0.0)\n\nConstruct a Beam object with default parameters. All parameters are optional.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.Beam-Tuple{}","page":"API","title":"JuTrack.Beam","text":"Beam(energy::Float64, np::Int, nmacro::Int; charge::Float64=-1.0, mass::Float64=0.51099895e6, atn::Float64=1.0,\nemittance::Vector{Float64}=zeros(Float64, 3), centroid::Vector{Float64}=zeros(Float64, 6), T0::Float64=0.0, znbin::Int=99, current::Float64=0.0)\n\nConstruct a Beam object with particle coordinates. The parameters are optional to be specified.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.CORRECTOR","page":"API","title":"JuTrack.CORRECTOR","text":"CORRECTOR(;name::String = \"CORRECTOR\", len::Float64 = 0.0, xkick::Float64 = 0.0, ykick::Float64 = 0.0, \n    T1::Array{Float64,1} = zeros(6), T2::Array{Float64,1} = zeros(6), R1::Array{Float64,2} = zeros(6,6), \n    R2::Array{Float64,2} = zeros(6,6))\n\nA corrector element. Example:\n\ncorrector = CORRECTOR(name=\"C1\", len=0.5, xkick=1e-3)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.CRABCAVITY","page":"API","title":"JuTrack.CRABCAVITY","text":"CRABCAVITY(;name::String = \"CRABCAVITY\", len::Float64 = 0.0, volt::Float64 = 0.0, freq::Float64 = 0.0, \n    phi::Float64 = 0.0, errors::Array{Float64,1} = zeros(2), energy::Float64 = 1e9)\n\nA crab cavity element. Example:\n\ncrab = CRABCAVITY(name=\"CRAB1\", len=0.5, volt=1e6, freq=1e6)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.CTPS-Tuple{Type, Int64, Int64}","page":"API","title":"JuTrack.CTPS","text":"CTPS(T::Type, TPS_Dim::Int, Max_TPS_Degree::Int)\n\nCreate a truncated power series (TPS) object with type T, dimension TPS_Dim, and maximum degree Max_TPS_Degree.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.CTPS-Union{Tuple{CTPS{T, TPS_Dim, Max_TPS_Degree}}, Tuple{Max_TPS_Degree}, Tuple{TPS_Dim}, Tuple{T}} where {T, TPS_Dim, Max_TPS_Degree}","page":"API","title":"JuTrack.CTPS","text":"CTPS(M::CTPS{T, TPS_Dim, Max_TPS_Degree})\n\nCopy a truncated power series (TPS) object M.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.CTPS-Union{Tuple{T}, Tuple{T, Int64, Int64, Int64}} where T","page":"API","title":"JuTrack.CTPS","text":"CTPS(a::T, n::Int, TPS_Dim::Int, Max_TPS_Degree::Int)\n\nCreate a truncated power series (TPS) object with type T, dimension TPS_Dim, and maximum degree Max_TPS_Degree, and set the n-th variable to a.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.CTPS-Union{Tuple{T}, Tuple{T, Int64, Int64}} where T","page":"API","title":"JuTrack.CTPS","text":"CTPS(a::T, TPS_Dim::Int, Max_TPS_Degree::Int)\n\nCreate a truncated power series (TPS) object with type T, dimension TPS_Dim, and maximum degree Max_TPS_Degree, and set the constant term to a.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.DRIFT","page":"API","title":"JuTrack.DRIFT","text":"DRIFT(;name::String = \"DRIFT\", len::Float64 = 0.0, T1::Array{Float64,1} = zeros(6), \n    T2::Array{Float64,1} = zeros(6), R1::Array{Float64,2} = zeros(6,6), R2::Array{Float64,2} = zeros(6,6), \n    RApertures::Array{Float64,1} = zeros(6), EApertures::Array{Float64,1} = zeros(6))\n\nA drift element.\n\nArguments\n\nname::String: element name\nlen::Float64: element length\nT1::Array{Float64,1}: misalignment at entrance\nT2::Array{Float64,1}: misalignment at exit\nR1::Array{Float64,2}: rotation at entrance\nR2::Array{Float64,2}: rotation at exit\nRApertures::Array{Float64,1}: rectangular apertures. Not implemented yet.\nEApertures::Array{Float64,1}: elliptical apertures. Not implemented yet.\n\nExample:\n\ndrift = DRIFT(name=\"D1\", len=1.0)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.DRIFT_SC","page":"API","title":"JuTrack.DRIFT_SC","text":"DRIFT_SC(;name::String = \"DRIFT_SC\", len::Float64 = 0.0, T1::Array{Float64,1} = zeros(6), \n    T2::Array{Float64,1} = zeros(6), R1::Array{Float64,2} = zeros(6,6), R2::Array{Float64,2} = zeros(6,6), \n    RApertures::Array{Float64,1} = zeros(6), EApertures::Array{Float64,1} = zeros(6), a::Float64 = 1.0, b::Float64 = 1.0,\n    Nl::Int64 = 10, Nm::Int64 = 10, Nsteps::Int64=1)\n\nA drift element with space charge.\n\nArguments\n\nname::String: element name\nlen::Float64: element length\nT1::Array{Float64,1}: misalignment at entrance\nT2::Array{Float64,1}: misalignment at exit\nR1::Array{Float64,2}: rotation at entrance\nR2::Array{Float64,2}: rotation at exit\nRApertures::Array{Float64,1}: rectangular apertures. Not implemented yet.\nEApertures::Array{Float64,1}: elliptical apertures. Not implemented yet.\na::Float64: horizontal size of the perfectly conducting pipe\nb::Float64: vertical size of the perfectly conducting pipe\nNl::Int64: number of mode in the horizontal direction\nNm::Int64: number of mode in the vertical direction\nNsteps::Int64: number of steps for space charge calculation. One step represents a half-kick-half.\n\nExample:\n\ndrift = DRIFT_SC(name=\"D1_SC\", len=0.5, a=13e-3, b=13e-3, Nl=15, Nm=15)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.EdwardsTengTwiss-Tuple{Float64, Float64}","page":"API","title":"JuTrack.EdwardsTengTwiss","text":"EdwardsTengTwiss(betax::Float64,betay::Float64;\n\t\t   alphax::Float64=0.0,alphay::Float64=0.0,\n\t\t   dx::Float64=0.0,dy::Float64=0.0,\n\t\t   dpx::Float64=0.0,dpy::Float64=0.0,\n\t\t   mux::Float64=0.0,muy::Float64=0.0,\n\t\t   R11::Float64=0.0,R12::Float64=0.0,\n\t\t   R21::Float64=0.0,R22::Float64=0.0,\n\t\t   mode::Int=1)=EdwardsTengTwiss(betax,betay,alphax,alphay,(1.0+alphax^2)/betax,(1.0+alphay^2)/betay,\n\t\t\t\t\t\t\t\t\t\tdx,dpx,dy,dpy,mux,muy,sin(mux),cos(mux),sin(muy),cos(muy),[R11 R12;R21 R22],mode)\n\nConstruct a EdwardsTengTwiss object with betax and betay. All other parameters are optional.\n\nArguments\n\nbetax::Float64: Horizontal beta function.\nbetay::Float64: Vertical beta function.\nalphax::Float64=0.0: Horizontal alpha function.\nalphay::Float64=0.0: Vertical alpha function.\ndx::Float64=0.0: Horizontal dispersion.\ndy::Float64=0.0: Vertical dispersion.\ndpx::Float64=0.0: derivative of horizontal dispersion.\ndpy::Float64=0.0: derivative of vertical dispersion.\nmux::Float64=0.0: Horizontal phase advance.\nmuy::Float64=0.0: Vertical phase advance.\nR11::Float64=0.0: Matrix Element R11.\nR12::Float64=0.0: Matrix Element R12.\nR21::Float64=0.0: Matrix Element R21.\nR22::Float64=0.0: Matrix Element R22.\nmode::Int=1: mode for calculation.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.KOCT","page":"API","title":"JuTrack.KOCT","text":"KOCT(;name::String = \"OCT\", len::Float64 = 0.0, k3::Float64 = 0.0, \n    PolynomA::Array{Float64,1} = zeros(Float64, 4), PolynomB::Array{Float64,1} = zeros(Float64, 4), \n    MaxOrder::Int64=3, NumIntSteps::Int64 = 10, rad::Int64=0, FringeQuadEntrance::Int64 = 0, \n    FringeQuadExit::Int64 = 0, FringeIntM0::Array{Float64,1} = zeros(Float64, 5), \n    FringeIntP0::Array{Float64,1} = zeros(Float64, 5), T1::Array{Float64,1} = zeros(Float64, 6), \n    T2::Array{Float64,1} = zeros(Float64, 6), R1::Array{Float64,2} = zeros(Float64, 6, 6), \n    R2::Array{Float64,2} = zeros(Float64, 6, 6), RApertures::Array{Float64,1} = zeros(Float64, 6), \n    EApertures::Array{Float64,1} = zeros(Float64, 6), KickAngle::Array{Float64,1} = zeros(Float64, 2))\n\nA canonical octupole element. Example:\n\noct = KOCT(name=\"O1\", len=0.5, k3=0.5)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.KOCT_SC","page":"API","title":"JuTrack.KOCT_SC","text":"KOCT_SC(;name::String = \"OCT\", len::Float64 = 0.0, k3::Float64 = 0.0, \n    PolynomA::Array{Float64,1} = zeros(Float64, 4), PolynomB::Array{Float64,1} = zeros(Float64, 4), \n    MaxOrder::Int64=3, NumIntSteps::Int64 = 10, rad::Int64=0, FringeQuadEntrance::Int64 = 0, \n    FringeQuadExit::Int64 = 0, FringeIntM0::Array{Float64,1} = zeros(Float64, 5), \n    FringeIntP0::Array{Float64,1} = zeros(Float64, 5), T1::Array{Float64,1} = zeros(Float64, 6), \n    T2::Array{Float64,1} = zeros(Float64, 6), R1::Array{Float64,2} = zeros(Float64, 6, 6), \n    R2::Array{Float64,2} = zeros(Float64, 6, 6), RApertures::Array{Float64,1} = zeros(Float64, 6),\n    EApertures::Array{Float64,1} = zeros(Float64, 6), KickAngle::Array{Float64,1} = zeros(Float64, 2),\n    a::Float64 = 1.0, b::Float64 = 1.0, Nl::Int64 = 10, Nm::Int64 = 10, Nsteps::Int64=1)\n\nA canonical octupole element with space charge. Example:\n\noct = KOCT_SC(name=\"O1_SC\", len=0.5, k3=0.5, a=13e-3, b=13e-3, Nl=15, Nm=15)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.KQUAD","page":"API","title":"JuTrack.KQUAD","text":"KQUAD(;name::String = \"Quad\", len::Float64 = 0.0, k1::Float64 = 0.0, \n    PolynomA::Array{Float64,1} = zeros(Float64, 4), PolynomB::Array{Float64,1} = zeros(Float64, 4), \n    MaxOrder::Int64=1, NumIntSteps::Int64 = 10, rad::Int64=0, FringeQuadEntrance::Int64 = 0, \n    FringeQuadExit::Int64 = 0, FringeIntM0::Array{Float64,1} = zeros(Float64, 5), \n    FringeIntP0::Array{Float64,1} = zeros(Float64, 5), T1::Array{Float64,1} = zeros(Float64, 6), \n    T2::Array{Float64,1} = zeros(Float64, 6), R1::Array{Float64,2} = zeros(Float64, 6, 6), \n    R2::Array{Float64,2} = zeros(Float64, 6, 6), RApertures::Array{Float64,1} = zeros(Float64, 6), \n    EApertures::Array{Float64,1} = zeros(Float64, 6), KickAngle::Array{Float64,1} = zeros(Float64, 2))\n\nA canonical quadrupole element.\n\nExample:\n\nquad = KQUAD(name=\"Q1\", len=0.5, k1=0.5)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.KQUAD_SC","page":"API","title":"JuTrack.KQUAD_SC","text":"KQUAD_SC(;name::String = \"Quad\", len::Float64 = 0.0, k1::Float64 = 0.0, \n    PolynomA::Array{Float64,1} = zeros(Float64, 4), PolynomB::Array{Float64,1} = zeros(Float64, 4), \n    MaxOrder::Int64=1, NumIntSteps::Int64 = 10, rad::Int64=0, FringeQuadEntrance::Int64 = 0, \n    FringeQuadExit::Int64 = 0, FringeIntM0::Array{Float64,1} = zeros(Float64, 5), \n    FringeIntP0::Array{Float64,1} = zeros(Float64, 5), T1::Array{Float64,1} = zeros(Float64, 6), \n    T2::Array{Float64,1} = zeros(Float64, 6), R1::Array{Float64,2} = zeros(Float64, 6, 6), \n    R2::Array{Float64,2} = zeros(Float64, 6, 6), RApertures::Array{Float64,1} = zeros(Float64, 6), \n    EApertures::Array{Float64,1} = zeros(Float64, 6), KickAngle::Array{Float64,1} = zeros(Float64, 2),\n    a::Float64 = 1.0, b::Float64 = 1.0, Nl::Int64 = 10, Nm::Int64 = 10, Nsteps::Int64=1)\n\nA canonical quadrupole element with space charge. Example:\n\nquad = KQUAD_SC(name=\"Q1_SC\", len=0.5, k1=0.5, a=13e-3, b=13e-3, Nl=15, Nm=15)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.KSEXT","page":"API","title":"JuTrack.KSEXT","text":"KSEXT(;name::String = \"Sext\", len::Float64 = 0.0, k2::Float64 = 0.0, \n    PolynomA::Array{Float64,1} = zeros(Float64, 4), PolynomB::Array{Float64,1} = zeros(Float64, 4), \n    MaxOrder::Int64=2, NumIntSteps::Int64 = 10, rad::Int64=0, FringeQuadEntrance::Int64 = 0, \n    FringeQuadExit::Int64 = 0, FringeIntM0::Array{Float64,1} = zeros(Float64, 5), \n    FringeIntP0::Array{Float64,1} = zeros(Float64, 5), T1::Array{Float64,1} = zeros(Float64, 6), \n    T2::Array{Float64,1} = zeros(Float64, 6), R1::Array{Float64,2} = zeros(Float64, 6, 6), \n    R2::Array{Float64,2} = zeros(Float64, 6, 6), RApertures::Array{Float64,1} = zeros(Float64, 6), \n    EApertures::Array{Float64,1} = zeros(Float64, 6), KickAngle::Array{Float64,1} = zeros(Float64, 2))\n\nA canonical sextupole element. Example:\n\nsext = KSEXT(name=\"S1\", len=0.5, k2=0.5)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.KSEXT_SC","page":"API","title":"JuTrack.KSEXT_SC","text":"KSEXT_SC(;name::String = \"Sext\", len::Float64 = 0.0, k2::Float64 = 0.0, \n    PolynomA::Array{Float64,1} = zeros(Float64, 4), PolynomB::Array{Float64,1} = zeros(Float64, 4), \n    MaxOrder::Int64=2, NumIntSteps::Int64 = 10, rad::Int64=0, FringeQuadEntrance::Int64 = 0, \n    FringeQuadExit::Int64 = 0, FringeIntM0::Array{Float64,1} = zeros(Float64, 5), \n    FringeIntP0::Array{Float64,1} = zeros(Float64, 5), T1::Array{Float64,1} = zeros(Float64, 6), \n    T2::Array{Float64,1} = zeros(Float64, 6), R1::Array{Float64,2} = zeros(Float64, 6, 6), \n    R2::Array{Float64,2} = zeros(Float64, 6, 6), RApertures::Array{Float64,1} = zeros(Float64, 6),\n    EApertures::Array{Float64,1} = zeros(Float64, 6), KickAngle::Array{Float64,1} = zeros(Float64, 2),\n    a::Float64 = 1.0, b::Float64 = 1.0, Nl::Int64 = 10, Nm::Int64 = 10, Nsteps::Int64=1)\n\nA canonical sextupole element with space charge. Example:\n\nsext = KSEXT_SC(name=\"S1_SC\", len=0.5, k2=0.5, a=13e-3, b=13e-3, Nl=15, Nm=15)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.LongitudinalRLCWake","page":"API","title":"JuTrack.LongitudinalRLCWake","text":"LongitudinalRLCWake(;freq::Float64=1.0e9, Rshunt::Float64=1.0e6, Q0::Float64=1.0)\n\nA longitudinal RLC wake element.\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.LongitudinalWake","page":"API","title":"JuTrack.LongitudinalWake","text":"LongitudinalWake(times::AbstractVector, wakefields::AbstractVector, wakefield::Function)\n\nCreate longitudinal wake element.\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.MARKER","page":"API","title":"JuTrack.MARKER","text":"MARKER(;name::String = \"MARKER\", len::Float64 = 0.0)\n\nA marker element. Example:\n\nmarker = MARKER(name=\"MARKER1\")\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.QUAD","page":"API","title":"JuTrack.QUAD","text":"QUAD(;name::String = \"Quad\", len::Float64 = 0.0, k1::Float64 = 0.0, rad::Int64 = 0, \n    T1::Array{Float64,1} = zeros(6), T2::Array{Float64,1} = zeros(6), R1::Array{Float64,2} = zeros(6,6), \n    R2::Array{Float64,2} = zeros(6,6), RApertures::Array{Float64,1} = zeros(6), EApertures::Array{Float64,1} = zeros(6))\n\nA quadrupole element using matrix formalism. Example:\n\nquad = QUAD(name=\"Q1\", len=0.5, k1=1.0)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.QUAD_SC","page":"API","title":"JuTrack.QUAD_SC","text":"QUAD_SC(;name::String = \"Quad\", len::Float64 = 0.0, k1::Float64 = 0.0, rad::Int64 = 0, \n    T1::Array{Float64,1} = zeros(6), T2::Array{Float64,1} = zeros(6), R1::Array{Float64,2} = zeros(6,6), \n    R2::Array{Float64,2} = zeros(6,6), RApertures::Array{Float64,1} = zeros(6), EApertures::Array{Float64,1} = zeros(6), \n    a::Float64 = 1.0, b::Float64 = 1.0, Nl::Int64 = 10, Nm::Int64 = 10, Nsteps::Int64=1)\n\nA quadrupole element with space charge. Example:\n\nquad = QUAD_SC(name=\"Q1_SC\", len=0.5, k1=1.0, a=13e-3, b=13e-3, Nl=15, Nm=15)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.RFCA","page":"API","title":"JuTrack.RFCA","text":"RFCA(;name::String = \"RFCA\", len::Float64 = 0.0, volt::Float64 = 0.0, freq::Float64 = 0.0, h::Float64 = 1.0, \n    lag::Float64 = 0.0, philag::Float64 = 0.0, energy::Float64 = 0.0)\n\nA RF cavity element. Example:\n\nrf = RFCA(name=\"RF1\", len=0.5, volt=1e6, freq=1e6)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.SBEND","page":"API","title":"JuTrack.SBEND","text":"SBEND(;name::String = \"SBend\", len::Float64 = 0.0, angle::Float64 = 0.0, e1::Float64 = 0.0, e2::Float64 = 0.0, \n    PolynomA::Array{Float64,1} = zeros(Float64, 4), PolynomB::Array{Float64,1} = zeros(Float64, 4), \n    MaxOrder::Int64=0, NumIntSteps::Int64 = 10, rad::Int64=0, fint1::Float64 = 0.0, fint2::Float64 = 0.0, \n    gap::Float64 = 0.0, FringeBendEntrance::Int64 = 1, FringeBendExit::Int64 = 1, FringeQuadEntrance::Int64 = 0, \n    FringeQuadExit::Int64 = 0, FringeIntM0::Array{Float64,1} = zeros(Float64, 5), FringeIntP0::Array{Float64,1} = zeros(Float64, 5), \n    T1::Array{Float64,1} = zeros(Float64, 6), T2::Array{Float64,1} = zeros(Float64, 6), R1::Array{Float64,2} = zeros(Float64, 6, 6), \n    R2::Array{Float64,2} = zeros(Float64, 6, 6), RApertures::Array{Float64,1} = zeros(Float64, 6), EApertures::Array{Float64,1} = zeros(Float64, 6), \n    KickAngle::Array{Float64,1} = zeros(Float64, 2))\n\nA sector bending magnet. Example:\n\nbend = SBEND(name=\"B1\", len=0.5, angle=0.5)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.SBEND_SC","page":"API","title":"JuTrack.SBEND_SC","text":"SBEND_SC(;name::String = \"SBend\", len::Float64 = 0.0, angle::Float64 = 0.0, e1::Float64 = 0.0, e2::Float64 = 0.0, \n    PolynomA::Array{Float64,1} = zeros(Float64, 4), PolynomB::Array{Float64,1} = zeros(Float64, 4), \n    MaxOrder::Int64=0, NumIntSteps::Int64 = 10, rad::Int64=0, fint1::Float64 = 0.0, fint2::Float64 = 0.0, \n    gap::Float64 = 0.0, FringeBendEntrance::Int64 = 1, FringeBendExit::Int64 = 1, \n    FringeQuadEntrance::Int64 = 0, FringeQuadExit::Int64 = 0, FringeIntM0::Array{Float64,1} = zeros(Float64, 5), \n    FringeIntP0::Array{Float64,1} = zeros(Float64, 5), T1::Array{Float64,1} = zeros(Float64, 6), \n    T2::Array{Float64,1} = zeros(Float64, 6), R1::Array{Float64,2} = zeros(Float64, 6, 6), \n    R2::Array{Float64,2} = zeros(Float64, 6, 6), RApertures::Array{Float64,1} = zeros(Float64, 6), \n    EApertures::Array{Float64,1} = zeros(Float64, 6), KickAngle::Array{Float64,1} = zeros(Float64, 2),\n    a::Float64 = 1.0, b::Float64 = 1.0, Nl::Int64 = 10, Nm::Int64 = 10, Nsteps::Int64=1)\n\nA sector bending magnet with space charge. Example:\n\nbend = SBEND_SC(name=\"B1_SC\", len=0.5, angle=0.5, a=13e-3, b=13e-3, Nl=15, Nm=15)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.SOLENOID","page":"API","title":"JuTrack.SOLENOID","text":"SOLENOID(;name::String = \"Solenoid\", len::Float64 = 0.0, ks::Float64 = 0.0, T1::Array{Float64,1} = zeros(6), \n    T2::Array{Float64,1} = zeros(6), R1::Array{Float64,2} = zeros(6,6), R2::Array{Float64,2} = zeros(6,6))\n\nA solenoid element. Example:\n\nsolenoid = SOLENOID(name=\"S1\", len=0.5, ks=1.0)\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.StrongGaussianBeam","page":"API","title":"JuTrack.StrongGaussianBeam","text":"StrongGaussianBeam(charge::Float64, mass::Float64, atomnum::Float64, np::Int, energy::Float64, op::AbstractOptics4D, bs::Vector{Float64}, nz::Int)\n\nConstruct a strong beam-beam element with Gaussian distribution.\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.optics4DUC-NTuple{4, Float64}","page":"API","title":"JuTrack.optics4DUC","text":"optics4DUC(bx::Float64, ax::Float64, by::Float64, ay::Float64)\n\nConstruct a 4D optics element with uncoupled optics.\n\nArguments\n\nbx::Float64: beta function in x direction\nax::Float64: alpha function in x direction\nby::Float64: beta function in y direction\nay::Float64: alpha function in y direction\n\nReturns\n\noptics4DUC: 4D optics element with uncoupled optics\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.thinMULTIPOLE","page":"API","title":"JuTrack.thinMULTIPOLE","text":"thinMULTIPOLE(;name::String = \"thinMULTIPOLE\", len::Float64 = 0.0, PolynomA::Array{Float64,1} = zeros(Float64, 4), \n    PolynomB::Array{Float64,1} = zeros(Float64, 4), MaxOrder::Int64=1, NumIntSteps::Int64 = 1, rad::Int64=0, \n    FringeQuadEntrance::Int64 = 0, FringeQuadExit::Int64 = 0, FringeIntM0::Array{Float64,1} = zeros(Float64, 5), \n    FringeIntP0::Array{Float64,1} = zeros(Float64, 5), T1::Array{Float64,1} = zeros(Float64, 6), \n    T2::Array{Float64,1} = zeros(Float64, 6), R1::Array{Float64,2} = zeros(Float64, 6, 6), \n    R2::Array{Float64,2} = zeros(Float64, 6, 6), RApertures::Array{Float64,1} = zeros(Float64, 6), \n    EApertures::Array{Float64,1} = zeros(Float64, 6), KickAngle::Array{Float64,1} = zeros(Float64, 2))\n\nA thin multipole element. PolynomA and PolynomB are the skew and normal components of the multipole.\n\nExample:\n\nmultipole = thinMULTIPOLE(name=\"M1\", len=0.5, PolynomA=[0.0, 0.0, 0.0, 0.0], PolynomB=[0.0, 0.0, 0.0, 0.0])\n\n\n\n\n\n","category":"type"},{"location":"api/#JuTrack.ADlinepass!-Tuple{Vector, Beam, Vector, Vector}","page":"API","title":"JuTrack.ADlinepass!","text":"ADlinepass!(line::Vector, particles::Beam, changed_idx::Vector, changed_ele::Vector)\n\nPass particles through the line element by element. The elements in the changed_idx will be replaced by the elements in changed_ele. This is a convinent function to implement the automatic differentiation.\n\nArguments\n\nline::Vector: a vector of beam line elements\nparticles::Beam: a beam object\nchanged_idx::Vector: a vector of indices of the elements to be changed\nchangedele::Vector: a vector of elements to replace the elements in `changedidx`\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.FMA-Tuple{Any, Any, Any}","page":"API","title":"JuTrack.FMA","text":"FMA(RING, beam, nturns)\n\ndo frequency map analysis (FMA) with NAFF\n\nArguments\n\nRING: lattice\nbeam: Beam object. Avoid zero initial coordinates.\nnturns: number of turns\n\nReturn\n\ndiff_nux: difference between nux1 and nux2\nnux1: horizontal tune 1\nnux2: horizontal tune 2\nnuy1: vertical tune 1\nnuy2: vertical tune 2\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.Gauss3_Dist-Tuple{Vector{Float64}, Int64}","page":"API","title":"JuTrack.Gauss3_Dist","text":"Gauss3_Dist(distparam::Vector{Float64}, Npt::Int; seed::Int=3)\n\nGenerate 6D Gaussian distribution.\n\nArguments\n\ndistparam::Vector{Float64}: Distribution parameters of the form [sigx, sigpx, muxpx, xscale, pxscale, xmu1, xmu2, sigy, sigpy, muypy, yscale, pyscale, xmu3, xmu4, sigz, sigpz, muzpz, zscale, pzscale, xmu5, xmu6]\nNpt::Int: Number of particles\nseed::Int=3: Random seed\n\nReturn\n\nPts1::Array{Float64,2}: 6D Gaussian distribution\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.RBEND-Tuple{}","page":"API","title":"JuTrack.RBEND","text":"RBEND(;name::String = \"RBend\", len::Float64 = 0.0, angle::Float64 = 0.0, PolynomA::Array{Float64,1} = zeros(Float64, 4), \n    PolynomB::Array{Float64,1} = zeros(Float64, 4), MaxOrder::Int64=0, NumIntSteps::Int64 = 10, rad::Int64=0, \n    fint1::Float64 = 0.0, fint2::Float64 = 0.0, gap::Float64 = 0.0, FringeBendEntrance::Int64 = 1, \n    FringeBendExit::Int64 = 1, FringeQuadEntrance::Int64 = 0, FringeQuadExit::Int64 = 0, \n    FringeIntM0::Array{Float64,1} = zeros(Float64, 5), FringeIntP0::Array{Float64,1} = zeros(Float64, 5), \n    T1::Array{Float64,1} = zeros(Float64, 6), T2::Array{Float64,1} = zeros(Float64, 6), \n    R1::Array{Float64,2} = zeros(Float64, 6, 6), R2::Array{Float64,2} = zeros(Float64, 6, 6), \n    RApertures::Array{Float64,1} = zeros(Float64, 6), EApertures::Array{Float64,1} = zeros(Float64, 6), \n    KickAngle::Array{Float64,1} = zeros(Float64, 2))\n\nA rectangular bending magnet. Example:\n\nbend = RBEND(name=\"B1\", len=0.5, angle=0.5)\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.cst-Union{Tuple{CTPS{T, TPS_Dim, Max_TPS_Degree}}, Tuple{Max_TPS_Degree}, Tuple{TPS_Dim}, Tuple{T}} where {T, TPS_Dim, Max_TPS_Degree}","page":"API","title":"JuTrack.cst","text":"cst(ctps::CTPS{T, TPS_Dim, Max_TPS_Degree})\n\nReturn the constant term of a truncated power series (TPS) object ctps.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.fastfindm66","page":"API","title":"JuTrack.fastfindm66","text":"fastfindm66(LATTICE, dp=0.0)\n\nFind the 6x6 transfer matrix of a lattice using numerical differentiation.\n\nArguments\n\nLATTICE: Beam line sequence.\ndp::Float64=0.0: Momentum deviation.\n\nReturns\n\nMatrix{Float64}: 6x6 transfer matrix.\n\n\n\n\n\n","category":"function"},{"location":"api/#JuTrack.findelem-Tuple{Vector, Symbol, Any}","page":"API","title":"JuTrack.findelem","text":"findelem(ring::Vector, field::Symbol, value)\n\nFind the index of elements with the specified field value in the ring.\n\nArguments\n\nring::Vector: a vector of beam line elements\nfield::Symbol: the field name\nvalue: the value of the field\n\nReturn\n\nele_index::Vector{Int}: a vector of indices of the elements with the specified field value\n\nExample\n\nele_index = findelem(ring, :name, \"QF\")\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.findelem-Tuple{Vector, Type}","page":"API","title":"JuTrack.findelem","text":"findelem(ring::Vector, type::Type)\n\nFind the index of elements with the specified type in the ring.\n\nArguments\n\nring::Vector: a vector of beam line elements\ntype::Type: the type of the element\n\nReturn\n\nele_index::Vector{Int}: a vector of indices of the elements with the specified type\n\nExample\n\nele_index = findelem(ring, DRIFT)\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.findindex-Union{Tuple{Max_TPS_Degree}, Tuple{TPS_Dim}, Tuple{T}, Tuple{CTPS{T, TPS_Dim, Max_TPS_Degree}, Vector{Int64}}} where {T, TPS_Dim, Max_TPS_Degree}","page":"API","title":"JuTrack.findindex","text":"findindex(ctps::CTPS{T, TPS_Dim, Max_TPS_Degree}, indexmap::Vector{Int})\n\nFind the index of the indexmap in the map vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.findm66-Tuple{Any, Float64, Int64}","page":"API","title":"JuTrack.findm66","text":"findm66(seq, dp::Float64, order::Int)\n\nFind the 6x6 transfer matrix of a sequence using TPSA.\n\nArguments\n\nseq: Sequence of elements.\ndp::Float64: Momentum deviation.\norder::Int: Order of the map.\n\nReturns\n\nMatrix{Float64}: 6x6 transfer matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.get_2nd_moment!-Tuple{Beam}","page":"API","title":"JuTrack.get_2nd_moment!","text":"get_2nd_moment!(beam::Beam)\n\nGet 2nd moment of the beam. Example:\n\nget_2nd_moment!(beam)\nprintln(beam.moment2nd)\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.get_centroid!-Tuple{Beam}","page":"API","title":"JuTrack.get_centroid!","text":"get_centroid!(beam::Beam)\n\nGet 6-D centroid of the beam. Example:\n\nget_centroid!(beam)\nprintln(beam.centroid)\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.get_emittance!-Tuple{Beam}","page":"API","title":"JuTrack.get_emittance!","text":"get_emittance!(beam::Beam)\n\nGet emittance of the beam. Example:\n\nget_emittance!(beam)\nprintln(beam.emittance)\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.histogram1DinZ!-Tuple{Beam, Int64, Any, Any, Any}","page":"API","title":"JuTrack.histogram1DinZ!","text":"histogram1DinZ!(beam::Beam, nbins::Int64, inzindex, zhist, zhist_edges)\n\nHistogram in z.\n\nExample:\n\nhistogram1DinZ!(beam, beam.znbin, beam.inzindex, beam.zhist, beam.zhist_edges)\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.histogram1DinZ!-Tuple{Beam}","page":"API","title":"JuTrack.histogram1DinZ!","text":"histogram1DinZ!(beam::Beam)\n\nHistogram in z.\n\nExample:\n\nhistogram1DinZ!(beam)\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.linepass!-Tuple{Vector, Beam, Vector}","page":"API","title":"JuTrack.linepass!","text":"linepass!(line::Vector, particles::Beam, refpts::Vector)\n\nPass particles through the line element by element. Save the particles at the reference points.\n\nArguments\n\nline::Vector: a vector of beam line elements\nparticles::Beam: a beam object\nrefpts::Vector: a vector of reference points\n\nReturns\n\nsaved_particles::Vector: a vector of saved particles\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.linepass!-Tuple{Vector, Beam}","page":"API","title":"JuTrack.linepass!","text":"linepass!(line::Vector, particles::Beam)\n\nPass particles through the line element by element. The particles are stored in the Beam object.\n\nArguments\n\nline::Vector: a vector of beam line elements\nparticles::Beam: a beam object\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.linepass_TPSA!-Union{Tuple{Max_TPS_Degree}, Tuple{TPS_Dim}, Tuple{T}, Tuple{Vector, Array{CTPS{T, TPS_Dim, Max_TPS_Degree}, 1}}} where {T, TPS_Dim, Max_TPS_Degree}","page":"API","title":"JuTrack.linepass_TPSA!","text":"linepass_TPSA!(line::Vector, rin::Vector{CTPS{T, TPS_Dim, Max_TPS_Degree}})\n\nPass 6-D TPSA coordinates through the line element by element.\n\nArguments\n\nline::Vector: a vector of beam line elements\nrin::Vector{CTPS{T, TPSDim, MaxTPS_Degree}}: a vector of 6-D TPSA coordinates\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.pass!-Tuple{DRIFT, Vector{Float64}, Int64, Beam}","page":"API","title":"JuTrack.pass!","text":"pass!(ele::DRIFT, r_in::Array{Float64,1}, num_particles::Int64, particles::Beam)\n\nThis is a function to track particles through a drift element.\n\nArguments\n\nele::DRIFT: a drift element\nrin::Array{Float64,1}: 6-by-numparticles array\nnum_particles::Int64: number of particles\nparticles::Beam: beam object\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.plinepass!-Tuple{Vector, Beam}","page":"API","title":"JuTrack.plinepass!","text":"plinepass!(line::Vector, particles::Beam)\n\nPass particles through the line element by element by implementing multi-threading. The number of threads is determined by the environment variable JULIA_NUM_THREADS.\n\nArguments\n\nline::Vector: a vector of beam line elements\nparticles::Beam: a beam object\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.pringpass!-Tuple{Vector, Beam, Int64}","page":"API","title":"JuTrack.pringpass!","text":"pringpass!(line::Vector, particles::Beam, nturn::Int)\n\nPass particles through the ring by implementing multi-threading. The number of threads is determined by the environment variable JULIA_NUM_THREADS.\n\nArguments\n\nline::Vector: a vector of beam line elements\nparticles::Beam: a beam object\nnturn::Int: number of turns\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.ringpass!-Tuple{Vector, Beam, Int64, Bool}","page":"API","title":"JuTrack.ringpass!","text":"ringpass!(line::Vector, particles::Beam, nturn::Int, save::Bool)\n\nPass particles through the ring for nturn turns. Save the particles at each turn.\n\nArguments\n\nline::Vector: a vector of beam line elements\nparticles::Beam: a beam object\nnturn::Int: number of turns\nsave::Bool: Flag\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.ringpass!-Tuple{Vector, Beam, Int64}","page":"API","title":"JuTrack.ringpass!","text":"ringpass!(line::Vector, particles::Beam, nturn::Int)\n\nPass particles through the ring for nturn turns.\n\nArguments\n\nline::Vector: a vector of beam line elements\nparticles::Beam: a beam object\nnturn::Int: number of turns\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.ringpass_TPSA!-Union{Tuple{Max_TPS_Degree}, Tuple{TPS_Dim}, Tuple{T}, Tuple{Vector, Array{CTPS{T, TPS_Dim, Max_TPS_Degree}, 1}, Int64}} where {T, TPS_Dim, Max_TPS_Degree}","page":"API","title":"JuTrack.ringpass_TPSA!","text":"ringpass_TPSA!(line::Vector, rin::Vector{CTPS{T, TPS_Dim, Max_TPS_Degree}}, nturn::Int)\n\nPass 6-D TPSA coordinates through the ring for nturn turns.\n\nArguments\n\nline::Vector: a vector of beam line elements\nrin::Vector{CTPS{T, TPSDim, MaxTPS_Degree}}: a vector of 6-D TPSA coordinates\nnturn::Int: number of turns\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.twissPropagate-Tuple{EdwardsTengTwiss, Matrix{Float64}}","page":"API","title":"JuTrack.twissPropagate","text":"twissPropagate(tin::EdwardsTengTwiss,M::Matrix{Float64})\n\nPropagate the Twiss parameters through a matrix M.\n\nArguments\n\ntin::EdwardsTengTwiss: Input Twiss parameters.\nM::Matrix{Float64}: Transfer matrix.\n\nReturns\n\nEdwardsTengTwiss: Output Twiss parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.twissline-Tuple{EdwardsTengTwiss, Vector, Float64, Int64, Int64}","page":"API","title":"JuTrack.twissline","text":"twissline(tin::EdwardsTengTwiss,seq::Vector, dp::Float64, order::Int, endindex::Int)\n\nPropagate the Twiss parameters through a sequence of elements.\n\nArguments\n\ntin::EdwardsTengTwiss: Input Twiss parameters.\nseq::Vector: Sequence of elements.\ndp::Float64: Momentum deviation.\norder::Int: Order of the map. 0 for finite difference, others for TPSA.\nendindex::Int: Index of the last element in the sequence.\n\nReturns\n\nEdwardsTengTwiss: Output Twiss parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#JuTrack.twissring-Tuple{Vector, Float64, Int64}","page":"API","title":"JuTrack.twissring","text":"twissring(seq::Vector, dp::Float64, order::Int)\n\nCalculate the periodic Twiss parameters of a ring.\n\nArguments\n\nseq::Vector: Sequence of elements.\ndp::Float64: Momentum deviation.\norder::Int: Order of the map. 0 for finite difference, others for TPSA.\n\nReturns\n\nEdwardsTengTwiss: periodic Twiss parameters.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"JuTrack.jl is a Julia package for auto-differentiable accelerator modeling and particle tracking.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install JuTrack.jl, run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/MSU-Beam-Dynamics/JuTrack.jl\")","category":"page"},{"location":"#Import-the-package-in-Julia","page":"Home","title":"Import the package in Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using JuTrack","category":"page"},{"location":"#Lattice-definition","page":"Home","title":"Lattice definition","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The lattice elements are defined with default arguments. It allows users to call the function without providing values for all arguments.","category":"page"},{"location":"","page":"Home","title":"Home","text":"D1 = DRIFT(name=\"D1\", len=1.0)\nD2 = DRIFT(name=\"D2\", len=1.0)\nD3 = DRIFT(name=\"D3\", len=1.0)\nD4 = DRIFT(name=\"D4\", len=1.0)\nD5 = DRIFT(name=\"D5\", len=1.0)\nQ1 = KQUAD(name=\"Q1\", len=1.0, k1=-0.9) \nQ2 = KQUAD(name=\"Q2\", len=1.0, k1=0.3)\nB1 = SBEND(name=\"B1\", len=0.6, angle=pi/15.0)\nB2 = SBEND(name=\"B2\", len=0.6, angle=-pi/15.0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Create the lattice as a Julia vector","category":"page"},{"location":"","page":"Home","title":"Home","text":"LINE = [D1, Q1, D2, B1, D3, Q2, D4, B2, D5, B2, D4, Q2, D3, B1, D2, Q1, D1]","category":"page"},{"location":"#Particle-tracking","page":"Home","title":"Particle tracking","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Particles' coordinates are represented as a N * 6 matrix, saved in beam.r. An example of creating an eletron beam with 10 particles,","category":"page"},{"location":"","page":"Home","title":"Home","text":"particles = rand(10, 6) / 1000\nbeam = Beam(particles, energy=3.5e9)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Track the beam through the beamline,","category":"page"},{"location":"","page":"Home","title":"Home","text":"linepass!(LINE, beam) # or ringpass!(RING, beam, nturns) for multi-turn tracking\nprintln(beam.r) ","category":"page"},{"location":"#Optics-calculation","page":"Home","title":"Optics calculation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Obtain periodic Twiss parameters of a ring accelerator","category":"page"},{"location":"","page":"Home","title":"Home","text":"twi = twissring(RING, 0.0, 1)","category":"page"},{"location":"#Automatic-differentiation","page":"Home","title":"Automatic differentiation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"autodiff function is used for automatic differetiation. Obtain derivatives of tracking result w.r.t the quadrupole strength k1,","category":"page"},{"location":"","page":"Home","title":"Home","text":"function tracking_wrt_k1(x)\n    D1 = DRIFT(len=1.0)\n    D2 = DRIFT(len=1.0)\n    Q1 = KQUAD(len=1.0, k1=x) \n    Q2 = KQUAD(len=1.0, k1=0.3)\n\n    beam = Beam([0.1 0.0 0.0 0.0 0.0 0.0], energy=3.5e9)\n\n    # !!! Creating a large lattice in the function you try to differentiate \n    # !!! will slow the computation and may result in an error.\n    # !!! Create/load the lattice outside of the function if it is large.\n    LINE = [D1, Q1, D2, Q2] \n    linepass!(LINE, beam)\n    return beam.r\nend\nk1 = -0.9\nderivatives, results = autodiff(ForwardWithPrimal, tracking_wrt_k1, Duplicated(k1, 1.0))","category":"page"},{"location":"#Parallel-computation-setting","page":"Home","title":"Parallel computation setting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Multi-threading is available for multi-particle tracking. Before using it, one has to set up the number of threads.","category":"page"},{"location":"","page":"Home","title":"Home","text":"On Linux or macOS:","category":"page"},{"location":"","page":"Home","title":"Home","text":"export JULIA_NUM_THREADS=N","category":"page"},{"location":"","page":"Home","title":"Home","text":"or add the above line to your .bashrc file. Change N to the desired number of threads.","category":"page"},{"location":"","page":"Home","title":"Home","text":"On Windows: Maually add JULIANUMTHREADS as the variable name and N (the number of threads) as the variable value in system variable.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is recommended to use Visual Studio Code to permanently set up the Julia environment.  Open the command palette (Ctrl+Shift+P or Cmd+Shift+P on macOS).  Type \"Preferences: Open Settings (JSON)\" and select it to open the settings file.  Add or modify the Julia settings to include the environment variable like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"\"julia.executablePath\": \"path/to/julia\", // change it to your Julia path\n\"julia.environmentVariables\": {\n    \"JULIA_NUM_THREADS\": \"48\" // Adjust the number to the desired number of threads\n}","category":"page"},{"location":"","page":"Home","title":"Home","text":"To check if the multi-threading is set up correctly, open the Julia REPL, and type:","category":"page"},{"location":"","page":"Home","title":"Home","text":"println(\"Number of threads in use: \", Threads.nthreads())","category":"page"},{"location":"","page":"Home","title":"Home","text":"Parallel computing is available for multi-particle tracking using:","category":"page"},{"location":"","page":"Home","title":"Home","text":"plinepass!(beamline, beam)","category":"page"},{"location":"","page":"Home","title":"Home","text":"or ","category":"page"},{"location":"","page":"Home","title":"Home","text":"pringpass!(beamline, beam, nturns)","category":"page"},{"location":"#Known-issues","page":"Home","title":"Known issues","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package currently supports forward AD. Backward AD is still under development.","category":"page"}]
}
